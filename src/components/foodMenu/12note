/* import { useSearchParams } from "next/navigation";
import { ChangeEvent, useEffect, useState } from "react";
import { Image, Plus } from "lucide-react";
import { Input } from "../ui/input";
import axios from "axios";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";

// Types
type Category = {
  _id: string;
  cateryName: string;
};

type Food = {
  _id: string;
  foodName: string;
  price: string;
  ingerdiets: string;
  image: string;
  category: string;
};

type Dish = {
  foodName: string | null;
  price: string | null;
  ingerdiets: string | null;
  image: string | null;
  category: string | undefined;
};

type Cat = {
  name: string;
  _id: string;
};

// Constants
const NEXT_PUBLIC_CLOUDINARY_API_KEY = "449676792634373";
const CLOUDINARY_UPLOAD_PRESET = "H8ahs3";
const CLOUDINARY_CLOUD_NAME = "dwauz9le4";
const API_URL = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`;

export const ProductList = () => {
  const [catery, setCatery] = useState<Cat>({
    name: "All Dishes",
    _id: "",
  });
  const searchParams = useSearchParams();
  const [addNewDishData, setAddNewDishData] = useState<Dish>({
    foodName: null,
    price: null,
    ingerdiets: null,
    image: null,
    category: undefined,
  });

  const [categories, setCategories] = useState<Category[]>([]);
  const [fileData, setFileData] = useState<File | null>(null);
  const [previewImg, setPreviewImg] = useState<string | undefined>();
  const [allFoods, setAllFoods] = useState<Food[]>([]);
  console.log(allFoods)
  const handleUploudImg = (e: ChangeEvent<HTMLInputElement>) => {
    const files = e?.target?.files;
    if (!files) return;
    const file = files[0];
    setFileData(file);
    const reader = new FileReader();

    reader.onload = () => {
      setPreviewImg(reader.result as string);
    };
    reader.readAsDataURL(file);
  };

  const fetchCategories = async () => {
    try {
      const response = await axios.get("http://localhost:4000/categories");
      const data = response.data.data;
      setCategories(data);
    } catch (error) {
      console.error("Error fetching categories:", error);
    }
  };

  const getAllFood = async () => {
    try {
      const response = await axios.get("http://localhost:4000/food/allfoods");
      console.log(response)
      setAllFoods(response.data.data);
    } catch (error) {
      console.error("Error fetching all foods:", error);
      // Set allFoods to empty array on error
      setAllFoods([]);
    }
  };

  const getFoodByCategory = async (categoryId: string) => {
    if (!categoryId) {
      await getAllFood();
      return;
    }
    
    try {
      const response = await axios.get(
        `http://localhost:4000/food/category/${categoryId}`
      );
      console.log(response)
      setAllFoods(response.data.data);
    } catch (error) {
      console.error("Error fetching foods by category:", error);
      setAllFoods([]);
    }
  };

  const uploadToCloudinary = async () => {
    if (!fileData) {
      alert("Please insert photo");
      return;
    }

    try {
      const file = new FormData();
      file.append("file", fileData);
      file.append("upload_preset", CLOUDINARY_UPLOAD_PRESET);
      file.append("api_key", NEXT_PUBLIC_CLOUDINARY_API_KEY);
      
      const response = await axios.post(API_URL, file, {
        headers: {
          "Content-Type": "multipart/form-data", 
        },
      });

      const updatedDishData = {
        ...addNewDishData,
        image: response.data.secure_url
      };
      setAddNewDishData(updatedDishData);
      
      await submitNewDish(updatedDishData);
    } catch (error) {
      console.error("Error uploading to Cloudinary:", error);
    }
  };

  const submitNewDish = async (dishData: Dish) => {
    try {
      const response = await fetch("http://localhost:4000/food/add", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          foodName: dishData.foodName,
          price: dishData.price,
          ingerdiets: dishData.ingerdiets,
          image: dishData.image,
          category: dishData.category,
        }),
      });
      const result = await response.json();
      console.log("New dish added:", result);
      
      // Refresh the food list
      if (catery._id) {
        getFoodByCategory(catery._id);
      } else {
        getAllFood();
      }
    } catch (error) {
      console.error("Error adding new dish:", error);
    }
  };

  const updateCategoryInDishData = () => {
    const category = categories.find((cat) => cat._id === catery._id);
    
    if (category) {
      setAddNewDishData(prev => ({
        ...prev,
        category: category._id
      }));
    }
  };

  useEffect(() => {
    fetchCategories();
  }, []);

  useEffect(() => {
    const selectedCategoryId = searchParams.get("cateryName");
    
    if (selectedCategoryId) {
      setCatery(prev => ({ ...prev, _id: selectedCategoryId }));
      
      // Update category name if we have the categories loaded
      if (categories.length > 0) {
        const category = categories.find(cat => cat._id === selectedCategoryId);
        if (category) {
          setCatery(prev => ({ ...prev, name: category.cateryName }));
        }
      }
      
      getFoodByCategory(selectedCategoryId);
    } else {
      getAllFood();
    }
  }, [searchParams, categories]);

  useEffect(() => {
    updateCategoryInDishData();
  }, [catery._id, categories]);

  const onFoodNameChange = (e: ChangeEvent<HTMLInputElement>) => {
    setAddNewDishData(prev => ({ ...prev, foodName: e.target.value }));
  };

  const onFoodPriceChange = (e: ChangeEvent<HTMLInputElement>) => {
    setAddNewDishData(prev => ({ ...prev, price: e.target.value }));
  };

  const onIngredientsChange = (e: ChangeEvent<HTMLInputElement>) => {
    setAddNewDishData(prev => ({ ...prev, ingerdiets: e.target.value }));
  };

  return (
    <>
      <div className="w-[1150px] p-6 bg-white rounded-xl inline-flex flex-col justify-start items-start gap-4 overflow-hidden relative left-12 mt-12">
        <p>{catery.name} ({allFoods ? allFoods.length : 0})</p>
        <div className="grid gap-8 wrap grid-cols-4">
          <AlertDialog>
            <AlertDialogTrigger onClick={updateCategoryInDishData}>
              <div className="w-[270.75px] h-[241px] px-4 py-2 border-[1px] border-dashed border-red-500 rounded-[20px] inline-flex flex-col justify-center items-center gap-6 overflow-hidden">
                <div className="flex justify-center items-center w-[36px] h-[36px] bg-[#ef4444] rounded-full">
                  <Plus stroke="white" />
                </div>
                <div className="w-40 text-center justify-start text-text-text-secondary-foreground text-sm font-medium leading-tight">
                  Add new Dish to {catery.name}
                </div>
              </div>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle className="justify-start text-lg font-semibold">
                  Add new Dish to {catery.name}
                </AlertDialogTitle>
                <AlertDialogDescription className="text-black"></AlertDialogDescription>
              </AlertDialogHeader>
              <div className="flex gap-5">
                <div>
                  <p>Food Name</p>
                  <Input
                    onChange={onFoodNameChange}
                    placeholder="Type food name"
                  />
                </div>
                <div>
                  <p>Food price</p>
                  <Input
                    onChange={onFoodPriceChange}
                    placeholder="Type price..."
                  />
                </div>
              </div>
              <div>
                <div>
                  <p>Ingredients</p>
                  <Input
                    onChange={onIngredientsChange}
                    placeholder="List ingredients..."
                  />
                </div>
                <div>
                  <p>Food image</p>
                  <label
                    htmlFor="files"
                    className="relative w-[416px] h-[180px] bg-[#7e7e7f]/5 rounded-lg flex-col justify-center items-center inline-flex gap-2 overflow-hidden"
                  >
                    {previewImg && <img src={previewImg} alt="Preview" />}
                    <input
                      id="files"
                      onChange={handleUploudImg}
                      type="file"
                      className="invisible"
                      name="profileImage"
                      accept="image/*"
                    />
                    <div className="h-9 w-9 rounded-full bg-white flex-col justify-center items-center inline-flex">
                      <Image />
                    </div>
                    <p>Choose a file or drag & drop it here</p>
                  </label>
                </div>
              </div>
              <AlertDialogFooter>
                <AlertDialogCancel>Cancel</AlertDialogCancel>
                <AlertDialogAction onClick={uploadToCloudinary}>
                  Add Dish
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>

          {allFoods && allFoods.length > 0 ? (
            allFoods.map((food) => (
              <div
                key={food._id}
                className="w-[270.75px] h-[241px] rounded-[22px] border-[1px] bg-white border-[#E4E4E7] p-4"
              >
                <img
                  className="w-[238.75px] h-[129px] gap-10 rounded-xl"
                  src={food.image}
                  alt={food.foodName}
                />
                <div className="self-stretch inline-flex flex-col justify-start items-start gap-2">
                  <div className="self-stretch inline-flex justify-center items-center gap-2.5">
                    <div className="flex-1 justify-start text-Tailwind-red---Text-color-500 text-sm font-medium leading-tight">
                      {food.foodName}
                    </div>
                    <div className="justify-start text-text-text-foreground text-xs font-normal leading-none">
                      ${food.price}
                    </div>
                  </div>
                  <div className="self-stretch justify-start text-text-text-foreground text-xs font-normal leading-none">
                    {food.ingerdiets}
                  </div>
                </div>
              </div>
            ))
          ) : (
            <div>No dishes available</div>
          )}
        </div>
      </div>
    </>
  );
}; */




/*   const formik = useFormik({
    initialValues: {
      foodName: "",
      ingredients: "",
      price: "",
      category: "",
      image: "",
    },
    validationSchema: foodSchema,
    onSubmit: async (values) => {
      console.log("ca", values);
      try {
        setLoading(false);
        if (data) {
          await UploadCloudiinary();
        }
        const response = await fetch("http://localhost:4000/food/add", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            foodName: values.foodName,
            price: values.price,
            ingerdiets: values.ingredients,
            image: formik.values.image,
            category: values.category,
          }),
        });
        getFoods();
        const result = await response.json();
        console.log("Dish added successfully:", result);
        formik.resetForm();
        setLoading(true);
      } catch (error) {
        console.error("Error adding dish:", error);
      }
    },
  }); */


